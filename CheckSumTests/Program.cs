using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.NetworkInformation;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;

namespace CheckSumTests
{
    class Program
    {
        public static string PrintBA(byte[] ba)
        {
            StringBuilder hex = new StringBuilder(ba.Length * 2);
            foreach (byte b in ba)
                hex.AppendFormat("{0:x2}", b);
            return hex.ToString(); 
        }

        private static byte[] header = new byte[] {0x5a, 0x5a};
	
        public static void Main()
        {
            //byte[] bytes = ;
		     
            List<byte[]> responses = new List<byte[]>();

            responses.Add(new byte[] {0x5a,0x5a,0x1d,0x16,0x19,0x19,0x0b,0x2c,0x0e,0x16,0x20,0x09,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x47,0x57,0x5d,0x3f,0x14,0x3f,0x16,0x17,0x18,0x19,0x22,0x4d,0x0c});
            responses.Add(new byte[] {0x5a,0x5a,0x1d,0x16,0x19,0x19,0x0b,0x2d,0x0e,0x16,0x20,0x09,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x47,0x57,0x5d,0x3f,0x14,0x3f,0x16,0x17,0x18,0x19,0x22,0x4d,0x0b});
            responses.Add(new byte[] {0x5a,0x5a,0x1d,0x16,0x19,0x19,0x0b,0x34,0x0e,0x16,0x20,0x09,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x47,0x57,0x5d,0x3f,0x14,0x3f,0x16,0x17,0x18,0x19,0x22,0x4d,0x04});
            responses.Add(new byte[] {0x5a,0x5a,0x1d,0x16,0x19,0x19,0x0b,0x36,0x0e,0x16,0x20,0x09,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x47,0x57,0x5d,0x3f,0x14,0x3f,0x16,0x17,0x18,0x19,0x22,0x4d,0x02});
            responses.Add(new byte[] {0x5a,0x5a,0x1d,0x16,0x19,0x19,0x0b,0x37,0x0e,0x16,0x20,0x09,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x47,0x57,0x5d,0x3f,0x14,0x3f,0x16,0x17,0x18,0x19,0x22,0x4d,0x01});
            responses.Add(new byte[] {0x5a,0x5a,0x1d,0x16,0x19,0x19,0x0b,0x38,0x0e,0x16,0x20,0x09,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x47,0x57,0x5d,0x3f,0x14,0x3f,0x16,0x17,0x18,0x19,0x22,0x4d,0x00});
            responses.Add(new byte[] {0x5a,0x5a,0x1d,0x16,0x19,0x19,0x0b,0x39,0x0e,0x16,0x20,0x09,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x47,0x57,0x5d,0x3f,0x14,0x3f,0x16,0x17,0x18,0x19,0x22,0x4d,0x3f});
            responses.Add(new byte[] {0x5a,0x5a,0x1d,0x16,0x19,0x19,0x0b,0x3a,0x0e,0x16,0x20,0x09,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x47,0x57,0x5d,0x3f,0x14,0x3f,0x16,0x17,0x18,0x19,0x22,0x4d,0x3f});
            responses.Add(new byte[] {0x5a,0x5a,0x1d,0x16,0x19,0x19,0x0b,0x3b,0x0e,0x16,0x20,0x09,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x47,0x57,0x5d,0x3f,0x14,0x3f,0x16,0x17,0x18,0x19,0x22,0x4d,0x3f});
            responses.Add(new byte[] {0x5a,0x5a,0x1d,0x16,0x19,0x19,0x0b,0x3c,0x0e,0x16,0x20,0x09,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x47,0x57,0x5d,0x3f,0x14,0x3f,0x16,0x17,0x18,0x19,0x22,0x4d,0x3f});
            responses.Add(new byte[]{0x5a,0x5a,0x1d,0x16,0x19,0x14,0x48,0x0d,0x15,0x16,0x20,0x09,0x09,0x13,0x0b,0x0c,0x0d,0x0e,0x0f,0x47,0x58,0x5a,0x13,0x14,0xdd,0x16,0x30,0x19,0x19,0x1a,0x1b,0x85});
            responses.Add(new byte[] { 0x5a,0x5a,0x1d,0x16,0x19,0x14,0x48,0x0d,0x15,0x16,0x20,0x09,0x09,0x13,0x0b,0x0c,0x0d,0x0e,0x0f,0x47,0x58,0x5a,0x13,0x14,0xdd,0x16,0x30,0x19,0x19,0x1a,0x1b,0x85});
            responses.Add(new byte[] { 0x5a,0x5a,0x1d,0x16,0x19,0x14,0x48,0x29,0x15,0x16,0x20,0x09,0x09,0x13,0x0b,0x0c,0x0d,0x0e,0x0f,0x47,0x58,0x5b,0x13,0x14,0xdd,0x16,0x30,0x19,0x19,0x1a,0x1b,0x68});
            responses.Add(new byte[] { 0x5a,0x5a,0x1d,0x16,0x19,0x14,0x48,0x45,0x15,0x16,0x20,0x09,0x09,0x13,0x0b,0x0c,0x0d,0x0e,0x0f,0x47,0x58,0x5b,0x13,0x14,0xdd,0x16,0x30,0x19,0x19,0x1a,0x1b,0x4c});
            responses.Add(new byte[] { 0x5a,0x5a,0x1d,0x16,0x19,0x14,0x48,0x5a,0x15,0x16,0x20,0x09,0x09,0x13,0x0b,0x0c,0x0d,0x0e,0x0f,0x47,0x58,0x5b,0x13,0x14,0xdd,0x16,0x30,0x19,0x19,0x1a,0x1b,0x37});
            responses.Add(new byte[] { 0x5a,0x5a,0x1d,0x16,0x19,0x14,0x49,0x16,0x15,0x16,0x20,0x09,0x09,0x13,0x0b,0x0c,0x0d,0x0e,0x0f,0x47,0x58,0x5b,0x13,0x14,0xdd,0x16,0x30,0x19,0x19,0x1a,0x1b,0x7a});
            responses.Add(new byte[] { 0x5a,0x5a,0x1d,0x16,0x19,0x14,0x49,0x2c,0x15,0x16,0x20,0x09,0x09,0x13,0x0b,0x0c,0x0d,0x0e,0x0f,0x47,0x58,0x5b,0x13,0x14,0xdd,0x16,0x30,0x19,0x19,0x1a,0x1b,0x64});
            responses.Add(new byte[] { 0x5a,0x5a,0x1d,0x16,0x19,0x14,0x49,0x48,0x15,0x16,0x20,0x09,0x09,0x13,0x0b,0x0c,0x0d,0x0e,0x0f,0x47,0x58,0x5b,0x13,0x14,0xdd,0x16,0x30,0x19,0x19,0x1a,0x1b,0x48});
            responses.Add(new byte[] { 0x5a,0x5a,0x1d,0x16,0x19,0x14,0x49,0x5d,0x15,0x16,0x20,0x09,0x09,0x13,0x0b,0x0c,0x0d,0x0e,0x0f,0x47,0x58,0x5b,0x13,0x14,0xdd,0x16,0x30,0x19,0x19,0x1a,0x1b,0x33});
            responses.Add(new byte[] { 0x5a,0x5a,0x1d,0x16,0x19,0x14,0x4a,0x19,0x15,0x16,0x20,0x09,0x09,0x13,0x0b,0x0c,0x0d,0x0e,0x0f,0x47,0x58,0x5b,0x13,0x14,0xdd,0x16,0x30,0x19,0x19,0x1a,0x1b,0x76});
            responses.Add(new byte[] { 0x5a,0x5a,0x1d,0x16,0x19,0x14,0x4a,0x35,0x15,0x16,0x20,0x09,0x09,0x13,0x0b,0x0c,0x0d,0x0e,0x0f,0x47,0x58,0x5b,0x13,0x14,0xdd,0x16,0x30,0x19,0x19,0x1a,0x1b,0x5a});
            responses.Add(new byte[] { 0x5a,0x5a,0x1d,0x16,0x19,0x14,0x4a,0x4a,0x15,0x16,0x20,0x09,0x09,0x13,0x0b,0x0c,0x0d,0x0e,0x0f,0x47,0x58,0x5b,0x13,0x14,0xdd,0x16,0x30,0x19,0x19,0x1a,0x1b,0x45});
            responses.Add(new byte[] { 0x5a,0x5a,0x1d,0x16,0x19,0x14,0x4b,0x06,0x15,0x16,0x20,0x09,0x09,0x13,0x0b,0x0c,0x0d,0x0e,0x0f,0x47,0x58,0x5b,0x13,0x14,0xdd,0x16,0x30,0x19,0x19,0x1a,0x1b,0x88});
            responses.Add(new byte[] { 0x5a,0x5a,0x1d,0x16,0x19,0x14,0x54,0x39,0x15,0x16,0x20,0x09,0x09,0x13,0x0b,0x0c,0x0d,0x0e,0x0f,0x47,0x58,0x5b,0x13,0x14,0xdd,0x16,0x30,0x19,0x19,0x1a,0x1b,0x4c});
            responses.Add(new byte[] { 0x5a,0x5a,0x1d,0x16,0x19,0x14,0x54,0x39,0x15,0x16,0x20,0x09,0x09,0x13,0x0b,0x0c,0x0d,0x0e,0x0f,0x47,0x58,0x5b,0x13,0x14,0xdd,0x16,0x30,0x19,0x19,0x1a,0x1b,0x4c});
            responses.Add(new byte[] { 0x5a,0x5a,0x1d,0x16,0x19,0x14,0x54,0x2d,0x25,0x07,0x27,0x09,0x09,0x13,0x0b,0x0c,0x0d,0x0e,0x0f,0x4c,0x4d,0x3e,0x93,0x77,0xdd,0x16,0x3d,0x1a,0x19,0x1a,0x1b,0x82});
            responses.Add(new byte[] {0x5a,0x5a,0x1d,0x16,0x19,0x14,0x5c,0x09,0x25,0x07,0x27,0x09,0x09,0x13,0x0b,0x0c,0x0d,0x0e,0x0f,0x4c,0x51,0x3e,0x93,0x15,0xdd,0x16,0x30,0x19,0x19,0x1a,0x1b,0x0a});
            responses.Add(new byte[] {0x5a,0x5a,0x1d,0x16,0x19,0x15,0x1c,0x2d,0x25,0x07,0x27,0x09,0x09,0x14,0x0b,0x0c,0x0d,0x0e,0x0f,0x4c,0x44,0x3c,0x93,0x54,0xdd,0x16,0x46,0x18,0x19,0x1a,0xfd,0xff});
            foreach(var response in responses)
            {
                TestResponse(response);
            }
        }

        private static void TestResponse(byte[] response)
        {

            Console.WriteLine("========================");
            Console.WriteLine("Testing " + PrintBA(response));
            // Check length of response. Minimum it has 2 bytes header + 2 more: result and checksum
            if(response.Length < (header.Length + 2)){
                Console.WriteLine("Response length does not match expected.");
                return;
            }


            // Check the header
            if (response[0] != 0x5a || response[1] != 0x5a)
            {
                Console.WriteLine("Wrong header");
                return;
            }

            // Check the size of the data with the info in the response
            if (response.Length != (header.Length + 1 + response[header.Length]))
            {
                Console.WriteLine("Response length does not match response data");
            }

            List<byte> data = new List<byte>();
            for (int i = 2; i < response.Length - 1; i++) {
                data.Add((byte) response[i]);
            }
            const string formatter = "{0,25}";
            Console.WriteLine(formatter, BitConverter.ToString(response));
            Console.WriteLine(formatter, BitConverter.ToString(data.ToArray()));
		
            for(int i=1; i < data.Count; i++){
                data[i] = (byte)(data[i] - i + 1);	
            }

            Console.WriteLine(formatter, BitConverter.ToString(data.ToArray()));
            
            // checksum validation
            var origCheckSum = data[data.Count - 1];
            
            int sum = data.ToArray().Sum(d => d);
            var b = BitConverter.GetBytes(sum);
            byte checkSum = (byte)(((byte) sum & 0xFF) ^ 0xFF);

            if (response[response.Length - 1] != ((byte)(checkSum + (data.Count - 1))&0xFF))
            {
                Console.WriteLine("Wrong checksum!");
                
            }

            Console.WriteLine("========================");
        }
    }
}
